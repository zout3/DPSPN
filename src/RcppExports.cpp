// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fitDPSPN
Rcpp::List fitDPSPN(Rcpp::NumericMatrix& data, int D1, int Dp, Rcpp::IntegerVector clstrAssign, int nSamp, int nBurn, int nThin, bool updateAlpha, bool displayProgress);
RcppExport SEXP _DPSPN_fitDPSPN(SEXP dataSEXP, SEXP D1SEXP, SEXP DpSEXP, SEXP clstrAssignSEXP, SEXP nSampSEXP, SEXP nBurnSEXP, SEXP nThinSEXP, SEXP updateAlphaSEXP, SEXP displayProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< int >::type Dp(DpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type clstrAssign(clstrAssignSEXP);
    Rcpp::traits::input_parameter< int >::type nSamp(nSampSEXP);
    Rcpp::traits::input_parameter< int >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< int >::type nThin(nThinSEXP);
    Rcpp::traits::input_parameter< bool >::type updateAlpha(updateAlphaSEXP);
    Rcpp::traits::input_parameter< bool >::type displayProgress(displayProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(fitDPSPN(data, D1, Dp, clstrAssign, nSamp, nBurn, nThin, updateAlpha, displayProgress));
    return rcpp_result_gen;
END_RCPP
}
// fitHDPSPN
Rcpp::List fitHDPSPN(Rcpp::NumericMatrix& data, Rcpp::IntegerVector& rid, int D1, int Dp, Rcpp::IntegerVector clstrAssign, int nSamp, int nBurn, int nThin, bool updateAlpha, bool displayProgress);
RcppExport SEXP _DPSPN_fitHDPSPN(SEXP dataSEXP, SEXP ridSEXP, SEXP D1SEXP, SEXP DpSEXP, SEXP clstrAssignSEXP, SEXP nSampSEXP, SEXP nBurnSEXP, SEXP nThinSEXP, SEXP updateAlphaSEXP, SEXP displayProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type rid(ridSEXP);
    Rcpp::traits::input_parameter< int >::type D1(D1SEXP);
    Rcpp::traits::input_parameter< int >::type Dp(DpSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type clstrAssign(clstrAssignSEXP);
    Rcpp::traits::input_parameter< int >::type nSamp(nSampSEXP);
    Rcpp::traits::input_parameter< int >::type nBurn(nBurnSEXP);
    Rcpp::traits::input_parameter< int >::type nThin(nThinSEXP);
    Rcpp::traits::input_parameter< bool >::type updateAlpha(updateAlphaSEXP);
    Rcpp::traits::input_parameter< bool >::type displayProgress(displayProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(fitHDPSPN(data, rid, D1, Dp, clstrAssign, nSamp, nBurn, nThin, updateAlpha, displayProgress));
    return rcpp_result_gen;
END_RCPP
}
// computeLoglikhd
Rcpp::List computeLoglikhd(Rcpp::NumericMatrix& data, int Dcir, Rcpp::List& param);
RcppExport SEXP _DPSPN_computeLoglikhd(SEXP dataSEXP, SEXP DcirSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type Dcir(DcirSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(computeLoglikhd(data, Dcir, param));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DPSPN_fitDPSPN", (DL_FUNC) &_DPSPN_fitDPSPN, 9},
    {"_DPSPN_fitHDPSPN", (DL_FUNC) &_DPSPN_fitHDPSPN, 10},
    {"_DPSPN_computeLoglikhd", (DL_FUNC) &_DPSPN_computeLoglikhd, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_DPSPN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
